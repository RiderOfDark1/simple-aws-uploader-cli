#!/bin/bash

#Enable debugging
#set -x

#Colors
RED='\033[31m'
GREEN='\033[32m'
RESET='\033[0m' # Reset to default color

BASHRC_FILE="${HOME}/.bashrc"

#AWS S3 Bucket location
AWS_DEFAULT_BUCKET="${ROD_CLOUDUPLOADER_AWS_BUCKET}"
AWS_FULL_PATH_BUCKET="s3://${AWS_DEFAULT_BUCKET}"

#Backup .bashrc before modifying it
cp "$BASHRC_FILE" "$BASHRC_FILE.bak"

#Search for extra arguments
while [ "$#" -gt 0 ]; do
	case $1 in
		--set-bucket)
			if [ -n "$2" ]; then
				if grep -q "^export ROD_CLOUDUPLOADER_AWS_BUCKET=" "$BASHRC_FILE"; then

					#echo "AWS Bucket set to: $2"
					sed -i "s|^export ROD_CLOUDUPLOADER_AWS_BUCKET=.*|export ROD_CLOUDUPLOADER_AWS_BUCKET=\"$2\"|" "$BASHRC_FILE"

					echo "Variable ROD_CLOUDUPLOADER_AWS_BUCKET found in $BASHRC_FILE. Updating its value."
				else
					echo "Variable ROD_CLOUDUPLOADER_AWS_BUCKET not found in $BASHRC_FILE. Adding it."
					echo "#Add this for using custom script clouduploader" >> "$BASHRC_FILE"	
					echo "export ROD_CLOUDUPLOADER_AWS_BUCKET=\"$2\"" >> "$BASHRC_FILE"
					source ~/.bashrc
				fi
				#shift 2 if multiple options would be present then maybe shift
				source ~/.bashrc
				exit 0
			else
				echo -e "${RED}Error: --set-bucket requires a bucket name!${RESET}"
				exit 1
			fi	
			;;
		--get-bucket)
			source ~/.bashrc
			if [ -n "$AWS_DEFAULT_BUCKET" ]; then
				echo "Your current bucket is: ${AWS_DEFAULT_BUCKET}"
			else
				echo "Opps, your bucket is empty, I mean dry dry, please set your bucket with the --set-bucket flag."
			fi
			exit 0
			break
			;;
		*)
			break
			;;
	esac
done


# Check if the user provided a filename as an argument
if [ "$#" -ne 1 ]; then
	echo "Usage: clouduploader <filename>"
	exit 1
fi

# Store the filename from the first argument
FILE=$1

# Check if the file exists
if [ ! -f "$FILE" ] ; then
#	echo "File '$FILE' exists."
#else
	echo "File '$FILE' does not exists."
	exit 1
fi

# Check if file exists on AWS S3
aws s3 ls "${AWS_FULL_PATH_BUCKET}/${FILE}" >/dev/null 2>&1
FILE_EXISTENCE_STATUS=$?

if [ "$FILE_EXISTENCE_STATUS" -eq 0 ]; then
	echo -e "File ${GREEN}$FILE${RESET} exists in the S3 Bucket."

	#Provide user with a prompt where he can decide if he wants to overwrite the file
	read -p "Do you want to overwrite the file? (y/n):" answer
	answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

	if [ "$answer" == "y" ]; then
		echo "Overwriting the file..."
		aws s3 cp "$FILE" "$AWS_FULL_PATH_BUCKET"
	else
		echo "File not overwritten."
	fi
else
	#Upload the file directly
	echo "Uploading file..."
	aws s3 cp "$FILE" "$AWS_FULL_PATH_BUCKET"
fi
